					НАЧАЛО РАБОТЫ

extern IntPtr Initialize(IntPtr pPath, Int32 logLevel);

	Выполняет инициализацию библиотеки: запускает поток обработки очереди
	обратных вызовов, инициализирует систему логирования библиотеки.

	logPath Путь к директории, в которую будут сохраняться файлы отчетов
	logLevel Глубина логирования
	Предусмотрено три уровня логирования, в соответствии с
	детализацией и размером лог-файла:
	1 – минимальный
	2 – стандартный (рекомендуемый);
	3 – максимальный
	Данная функция в качестве аргументов принимает путь к папке (const BYTE*
	logPath), в которой будут созданы лог-файлы (XDF*.log, DSP*.txt, TS*.log), и
	уровень логирования (int logLevel).
	logPath должен включать в себя завершающий символ "\" и заканчиваться на
	терминальный символ «\0». Пример:
	logPath = "D:\\Logs\\\0";
	Функция Initialize может быть вызвана в процессе работы с Коннектором
	повторно для изменения директории и уровня логирования, но только в
	случае, когда библиотека остановлена, то есть была выполнена команда
	disconnect или соединение еще не было установлено.


extern bool SetCallback(CallBackDelegate pCallback);

	для передачи делегата обработчика события обратного вызова, используется в начале работы

	//Обработчик обратных вызовов
	delegate bool CallBackDelegate(IntPtr pData);

	IntPtr - данные обратного вызова
	//IntPtr -> String
	String data = Kernel.MarshalUTF8.PtrToStringUTF8(pData);
	//string -> IntPtr
	IntPtr pData = Kernel.MarshalUTF8.StringToHGlobalUTF8(command);


	после получения данных, их нужно очистить с помощью FreeMemory(pData);
	
					
	
			РАБОТА
			
//отправка комманды
IntPtr pResult = SendCommand(IntPtr pData);

после отправки комманды необходимо выполнить очистку
Marshal.FreeHGlobal(pData); //очистка памяти от отправляемой команды
FreeMemory(pResult);		//очистка памяти от полученного результата

Возвращаемые значени
		<result success=”true”/>
		
		<result success=”false”>
			<message>error message</message>
		</result>

		<error> Текст сообщения об ошибке</error>




			ЗАВЕРШЕНИЕ РАБОТЫ
extern IntPtr UnInitialize();
		Выполняет остановку внутренних потоков библиотеки, в том числе завершает
	поток обработки очереди обратных вызовов. Останавливает систему
	логирования библиотеки и закрывает файлы отчетов.

